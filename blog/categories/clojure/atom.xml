<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Artigos Da Categoria: Clojure | Programação, etc]]></title>
  <link href="http://lucasas.github.io/blog/categories/clojure/atom.xml" rel="self"/>
  <link href="http://lucasas.github.io/"/>
  <updated>2014-12-09T09:54:20-02:00</updated>
  <id>http://lucasas.github.io/</id>
  <author>
    <name><![CDATA[Lucas Souza]]></name>
    <email><![CDATA[lucasas@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Clojure E Recursão]]></title>
    <link href="http://lucasas.github.io/blog/2014/12/08/clojure-e-recursao/"/>
    <updated>2014-12-08T17:16:46-02:00</updated>
    <id>http://lucasas.github.io/blog/2014/12/08/clojure-e-recursao</id>
    <content type="html"><![CDATA[<p>Vamos ver um pouco sobre recursão e como resolver problemas de <em>tail recursion</em> utilizando Clojure. <!--more--></p>

<p><figure>
  <img src="/images/posts/recursion.jpg"/>
</figure></p>

<p>Você provavelmente já deve ter se deperado com algum código Javascript como o abaixo:</p>

<pre><code>var numbers = [1, 5, 6, 8, 10, 3, 45];
var total = 0;

for(var i=0; i &lt; numbers.length; i++) {
  total += numbers[i];
}
</code></pre>

<p>Tanto a variável <code>i</code> quanto a variável <code>total</code> são mutáveis, o que sabemos ser perigoso quando utilizamos paralelismo. Clojure não permite valores mutáveis, portanto, este tipo de problema não nos afeta. Em Clojure resolvemos estes problemas utilizando recursão, o jeito funcional de iterar uma coleção e construir um resultado.</p>

<p>Vamos criar uma função chamada <code>soma</code>, que obviamente, soma todos os valores de uma coleção. O código a seguir usa recursão para resolver o problema:</p>

<pre><code>(defn soma
  ([valores acumulador]
     (if (empty? valores)
       acumulador
       (soma (rest valores) (+ (first valores) acumulador)))))
</code></pre>

<p>A função recebe dois argumentos, a coleção que será iterada e um acumulador da soma de cada elemento. Como toda função recursiva, precisamos de uma condição de parada, no exemplo essa condição verifica se a coleção <code>valores</code> é vazia <code>(if (empty? valores))</code>. Se a condição for verdadeira, sabemos que todos os elementos da coleção foram somados, por isso, retornamos o valor <code>acumulador</code>.</p>

<p>Mas se a condição não for verdadeira, isso significa que precisamos processar o restante da coleção <code>(rest valores)</code>, então recursivamente chamamos a mesma funcao <code>soma</code> apenas com <code>(rest valores)</code>, o <code>acumulador</code> passado é a soma do primeiro <code>(+ (first valores) acumulador</code> elemento da coleção. Executamos a função recursivamente até que <code>(if (empty? valores))</code> seja <code>true</code>.</p>

<p>Cada chamada da função <code>soma</code> criará um novo escopo, onde <code>valores</code> e <code>acumulador</code> são bindados em outros valores, tudo sem mutações.</p>

<p>A chamada para a função <code>soma</code> fará o trabalho esperado:</p>

<pre><code>(soma [1 2 5] 0) ; =&gt; 8
</code></pre>

<p>A função <code>soma</code> chamada com poucos elementos não apresenta problemas de performance:</p>

<pre><code>(time (soma [1 2 5] 0)) ; =&gt; "Elapsed time: 0.047669 msecs"
</code></pre>

<p>Porém, se chamarmos com um número grande de elementos:</p>

<pre><code>(soma (range 10000) 0) ; =&gt; StackOverflowError   clojure.lang.ChunkedCons.more
</code></pre>

<p>O código acima causa <code>10001</code> chamadas a função <code>soma</code>. No momento da última chamada, a primeira chamada está esperando pela segunda, a segunda está esperando pela terceira, a terceira está esperando pela quarta, e assim sucessivamente. Por fim, a milionésima primeira chamada está esperando pela milionésima. Cada uma destas chamadas estarão consumindo memória.</p>

<p>Mas o que a milionésima primeira chamada fará com o resultado da milionésima? Absolutamente nada. A chamada recursiva é a última coisa feita, por isso o resultado é apenas passado de volta para o <em>caller</em>, que passa o resultado para outro <em>caller</em> até que chegue no <em>caller</em> original. Esse <em>pattern</em> é conhecido como <em>tail-recursion</em>.</p>

<p>Alguns compiladores são espertos o suficiente para perceber que existe uma <em>tail recursion</em> e reescrevem a função utilizando um <code>loop</code> internamente. Mas, por limitações da JVM, Clojure não faz isso automaticamente. É necessário dizer ao compilador que você tem uma <em>tail recursion</em>. Em Clojure basta usar a função <code>recur</code>:</p>

<pre><code>(defn soma
  ([valores acumulador]
     (if (empty? valores)
       acumulador
       (recur (rest valores) (+ (first valores) acumulador)))))
        ; substituímos a função `soma` por `recur`
</code></pre>

<p>Com apenas uma mudanças ganhamos uma grande melhoria de performance:</p>

<pre><code>(soma (range 1000) 0) ; =&gt; "Elapsed time: 0.219801 msecs"
</code></pre>

<p>Rodando o mesmo teste, mas utilizando a função soma antiga, é possível perceber quanto tempo ganhamos com esta mudança:</p>

<pre><code>(soma (range 1000) 0) ; =&gt; "Elapsed time: 0.784321 msecs"
</code></pre>

<p>O tempo foi quase 4 vezes maior que a função que utiliza <code>recur</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Em 15 Minutos]]></title>
    <link href="http://lucasas.github.io/blog/2014/12/05/clojure-em-15-minutos/"/>
    <updated>2014-12-05T16:04:28-02:00</updated>
    <id>http://lucasas.github.io/blog/2014/12/05/clojure-em-15-minutos</id>
    <content type="html"><![CDATA[<p>Decidi que começaria a estudar alguma linguagem funcional este ano. O &ldquo;problema&rdquo; era escolher
uma linguagem que tivesse mercado (afinal, já que quero aprender algo novo, vou unir o útil ao agradável e
aprender algo que me traga retorno), que tivesse uma comunidade ativa e que não tivesse uma syntax extramamente
bizarra. <!--more--></p>

<p><figure>
  <img src="/images/posts/clojure-logo.png"/>
</figure></p>

<p>Analisando todos estes fatores, decidi que Clojure seria a linguagem mais apropriada para o meu momento. Clojure
é bastante adotada em empresas fora do Brasil e algumas empresas por aqui estão utilizando também. A <a href="http://www.meetup.com/clj-sp">comunidade no Brasil</a> está crescendo e existem <a href="https://twitter.com/p_balduino">ótimos desenvolvedores</a> apostando nela.</p>

<p>Não vou entrar em detalhes sobre instalação e características da linguagem. Você pode ler mais sobre isso na <a href="http://clojure.org">documentação oficial da linguagem</a>, que alias, é excelente.</p>

<p>Clojure é um <a href="http://pt.wikipedia.org/wiki/Lisp">dialeto Lisp</a>, o que na minha opinião torna a linguagem muito simples de aprender, porém, muitos desenvolvedores acham que pode ser um processo lento seu aprendizado.</p>

<p>Nesse primeiro post, <a href="http://adambard.com/blog/clojure-in-15-minutes/">baseado no post &ldquo;Clojure in 15 minutes&rdquo; de Adam Bard</a>, de uma série de vários outros que pretendo escrever, vou abordar o básico da linguagem.</p>

<pre><code>; Comentários podem ser escritos com ponto e vírgula

; Clojure é escrito usando "forms", que são listas 
; de argmentos dentro de () separados por espaço em branco.
;
; O primeiro argumento sempre é uma função ou macro e 
; o restante são argumentos que serão passados para esta função
;
; Por exemplo:
(+ 1 2) ; =&gt; 3
; 
; + é função, os valores 1 e 2 são passados para função 
;
; Mais alguns exemplos:
(+ 1 1) ; =&gt; 2
(- 2 1) ; =&gt; 1
(* 1 2) ; =&gt; 2
(/ 2 1) ; =&gt; 2

; str criará uma nova string contendo todos argumentos passados
(str "Hello" " " "World") ; =&gt; "Hello World"

; Testes de igualdade são sempre feitos com `=`:
(= 1 1) ; =&gt; true
(= 2 1) ; =&gt; false

; Quando você deseja inverter o valor booleano use `not`:
(not true) ; =&gt; false

; Listas podem ser encadeadas. Clojure as executará de dentro para fora: 
(+ 1 (- 3 2)) ; = 1 + (3 - 2) =&gt; 2

; Tipos
;;;;;;;;;;;;;

; Clojure utiliza alguns tipos definidos no Java. Exemplo: booleanos, strings e números.
; Use `class` para verificar o tipo de um determinado valor
(class 1) ; Inteiros literais são java.lang.Long por padrão
(class 1.); Float literais são java.lang.Double
(class ""); Strings sempre são envoltas de aspas duplas, e são java.lang.String
(class false) ; Booleanos são java.lang.Boolean
(class nil); O valor "null" é nil

; Collections e Sequences
;;;;;;;;;;;;;;;;;;;

; Vetores
(class [1 2 3]) ; =&gt; clojure.lang.PersistentVector

; Listas
; Para não serem interpretadas como listas que devem ser lidas
; como as anteriores, adicionamos `'`
(class '(1 2 3)) ; =&gt; clojure.lang.PersistentList

; Usar a função `list` também é uma opção
(class (list 1 2 3)) ; =&gt; clojure.lang.PersistentList

; Ambas estruturas são collections
(coll? '(1 2 3)) ; =&gt; true
(coll? [1 2 3]) ; =&gt; true

; Porém, apenas listas são sequencias
(seq? '(1 2 3)) ; =&gt; true
(seq? [1 2 3]) ; =&gt; false

; Use `cons` para adicionar um item no começo de uma lista ou vetor
(cons 4 [1 2 3]) ; =&gt; (4 1 2 3)
(cons 4 '(1 2 3)) ; =&gt; (4 1 2 3)

; Use `conj` para adicionar um item no começo de uma lista
; ou no fim de um vetor
(conj [1 2 3] 4) ; =&gt; [1 2 3 4]
(conj '(1 2 3) 4) ; =&gt; (4 1 2 3)

; Use `concat` para juntar duas collections
(concat [1 2] '(3 4)) ; =&gt; (1 2 3 4)

; Use `map` para percorrer uma collection retornando outra
; com o resultado da operação feita. Por exemplo: A função `inc`
; utilizada com `map`, incrementará cada item da collection retornando
; uma nova
(map inc [1 2 3]) ; =&gt; (2 3 4)

; Use `filter` para percorrer e filtrar uma collection. Por exemplo:
(filter even? [1 2 3]) ; =&gt; (2)

; Use `reduce` para executar e agrupar os resultados
(reduce + [1 2 3 4])
; = (+ (+ (+ 1 2) 3) 4)
; =&gt; 10

; `reduce` pode receber uma argumento com valor inicial
(reduce + 1 [3 2 1])
; = (+ (+ (+ 1 3) 2) 1)
; =&gt; 7

; Para criar uma lista literal de dados, use '
'(+ 1 2) ; =&gt; (+ 1 2)

; Para executá-la use `eval`
(eval '(+ 1 2)) ; =&gt; 3


; Funções
;;;;;;;;;;;;;;;;;;;;;

; Use `fn` para criar funções anônimas. 
; Uma função sempre retorna seu último statement.
(fn [] "Olá") ; =&gt; fn

; Para invocá-la basta declará-la dentro de `()`
((fn [] "Olá")) ; =&gt; "Olá"

; Para guardar uma função em uma variável basta usar `def`
(def ola (fn [] "Olá"))
(ola) ; =&gt; "Olá"

; O processo pode ser encurtado usando `defn`
(defn ola [] "Olá")
(ola) ; =&gt; "Olá"

; `[]` representa o conjunto de parâmetros recebidos pela função
(defn ola [nome]
  (str "Olá " nome))
(ola "Lucas") ; =&gt; "Olá Lucas"

; É possível criar funções com múltiplas assinaturas
(defn ola
  ([] "Olá desconhecido")
  ([nome] (str "Olá " nome)))
(ola "Lucas") ; =&gt; "Olá Lucas"
(ola) ; =&gt; "Olá desconhecido"

; Funções podem receber argumentos extras e disponibilizá-los
; em uma seq
(defn funcao-com-muitos-argumentos [&amp; args]
  (str "Você passou " (count args) " argumentos: " args))
(funcao-com-muitos-argumentos 1 2 3) ; =&gt; "Você passou 3 argumentos: (1 2 3)"

; É possível receber argumentos pré-definidos e extras
(defn funcao-com-muitos-argumentos [nome &amp; args]
  (str "Oláá " nome ", você passou " (count args) " argumentos extra"))
(funcao-com-muitos-argumentos "Lucas" 1 2 3)
; =&gt; "Olá Lucas, você passou 3 argumentos extra"


; Hashmaps
;;;;;;;;;;

(class {:a 1 :b 2 :c 3}) ; =&gt; clojure.lang.PersistentArrayMap

; Keywords são como string
(class :a) ; =&gt; clojure.lang.Keyword

; Maps podem user qualquer tipo como chame, mas o mais comum é que sejam keywords
(def stringmap (hash-map "a" 1, "b" 2, "c" 3))
stringmap  ; =&gt; {"a" 1, "b" 2, "c" 3}

(def keymap (hash-map :a 1 :b 2 :c 3))
(keymap) ; =&gt; {:a 1, :c 3, :b 2} (Como todo HashMap, a ordem não é garantida)

; A propósito, vírgulas são ignoradas e tratadas como espaços em branco
; por isso, você pode definir um map separados os conjuntos de chave e valores
; apenas por espaço.

; Keywords podem ser utilizadas diretamente para pegar o valor de uma HashMap 
(:b keymap) ; =&gt; 2

; Não tente com String, isso não é Rails ;-)
;("a" stringmap)
; =&gt; Exception: java.lang.String cannot be cast to clojure.lang.IFn

; Keywords que não existem no HashMap retornam sempre nil
(:d keymap) ; =&gt; nil

; Use `assoc` para adicionar novas chaves
(assoc keymap :d 4) ; =&gt; {:a 1, :b 2, :c 3, :d 4}

; Mas lembre-se que Clojure trata tudo como imutável. Sendo assim:
keymap ; =&gt; {:a 1, :b 2, :c 3}

; Use `dissoc` para remover chaves
(dissoc keymap :a :b) ; =&gt; {:c 3}

; Sets
;;;;;;

(class #{1 2 3}) ; =&gt; clojure.lang.PersistentHashSet
(set [1 2 3 1 2 3 3 2 1 3 2 1]) ; =&gt; #{1 2 3}

; Adicione um item usando `conj`
(conj #{1 2 3} 4) ; =&gt; #{1 2 3 4}

; Remova um item usando `disj`
(disj #{1 2 3} 1) ; =&gt; #{2 3}

; Teste se um item existe em um set utilizando-o como uma função
(#{1 2 3} 1) ; =&gt; 1
(#{1 2 3} 4) ; =&gt; nil

; Outros forms
;;;;;;;;;;;;;;;;;

; Estruturas lógicas são macros no Clojure, e sua syntax
; é igualmente simples a todo resto.
(if false "a" "b") ; =&gt; "b"
(if false "a") ; =&gt; nil

; Use `let` para criar escopos temporários
; Neste exemplo, as variáveis `a` e `b` valem, respectivamente, `1` e `2`
(let [a 1 b 2]
  (+ a b)) ; =&gt; 3

E não podem ser utilizadas fora do `let`
(let [a 1 b 2]
  (+ a b)) ; =&gt; 3

(+ a b) ; =&gt; Unable to resolve symbol: a in this context 

; Grupos de statements podem ser feitos utilizando `do`:
(do
  (print "Olá")
  "Mundo") ; =&gt; "Olá" (prints "Mundo")

; Funções tem um `do` implícito
(defn imprime-e-diz-ola [nome]
  (print "Falando olá para " name)
  (str "Olá " name))
(imprime-e-diz-ola "Lucas") ;=&gt; "Olá Lucas" (prints "Falando olá para Lucas")

; `let` também possui `do` implícito
(let [nome "Lucas"]
  (print "Falando olá para " name)
  (str "Olá " name)) ;=&gt; "Olá Lucas" (prints "Falando olá para Lucas")
</code></pre>

<p>Isso é o básico para você conseguir brincar com Clojure.</p>
]]></content>
  </entry>
  
</feed>
