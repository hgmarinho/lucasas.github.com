<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Artigos Da Categoria: Fp | Programação, etc]]></title>
  <link href="http://lucasas.github.io/blog/categories/fp/atom.xml" rel="self"/>
  <link href="http://lucasas.github.io/"/>
  <updated>2014-12-19T20:37:02-02:00</updated>
  <id>http://lucasas.github.io/</id>
  <author>
    <name><![CDATA[Lucas Souza]]></name>
    <email><![CDATA[lucasas@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Criando Macros Com Syntax Quoting]]></title>
    <link href="http://lucasas.github.io/blog/2014/12/19/criando-macros-usando-syntax-quoting/"/>
    <updated>2014-12-19T19:43:40-02:00</updated>
    <id>http://lucasas.github.io/blog/2014/12/19/criando-macros-usando-syntax-quoting</id>
    <content type="html"><![CDATA[<p>No último post falei um pouco sobre <a href="http://lucasas.github.io/blog/2014/12/10/pattern-matching-clojure-erlang">macros</a>. Como <em>macros</em> é um assunto um pouco extenso, vou escrever mais alguns posts sobre detalhes avançados que podemos utilizar no dia-a-dia. <!-- more --></p>

<p>Só relembrando: <em>Macros</em> permitem estender a própria linguagem, ou seja, escrever a própria linguagem do jeito que você quiser. Podemos pegar como exemplo a macro <code>if-not</code>:</p>

<p><div><script src='https://gist.github.com/5502e5dfa9c79167b882.js'></script>
<noscript><pre><code>(defmacro if-not
  &quot;Evaluates test. If logical false, evaluates and returns then expr, 
  otherwise else expr, if supplied, else nil.&quot;
  {:added &quot;1.0&quot;}
  ([test then] `(if-not ~test ~then nil))
  ([test then else]
   `(if (not ~test) ~then ~else)))</code></pre></noscript></div>
</p>

<p>Essa <em>macro</em> é built-in na própria linguagem, mas caso não existesse, ao invés de chamar a função <code>if</code> invertendo o valor booleano <code>(if (not (zero? 0)) :then :else)</code>, poderíamos criar a mesma macro e deixar a chamada de código mais concisa <code>(if-not (zero? 0) :then :else)</code>.</p>

<p>A <em>macro</em> <code>when</code> é outro bom exemplo de como uma <em>macro</em> pode ajudar o código a ficar mais conciso:</p>

<p><div><script src='https://gist.github.com/b95446596a42b66204ca.js'></script>
<noscript><pre><code>(def idade 29)
(when (&gt; idade 18)
  (println &quot;pode beber champs&quot;)
  (println &quot;só na dirige&quot;))</code></pre></noscript></div>
</p>

<p>Caso a condição passada seja <code>true</code>, um bloco com múltiplas chamadas é executado, similar ao <a href="https://clojuredocs.org/clojure.core/do"><code>do</code></a>. Na real, por baixo dos panos, a chamada na <em>macro</em> <code>when</code>, retorna uma lista que será <code>evaluated</code>. Mas que lista é esta? Vamos verificar usando a função <a href="https://clojuredocs.org/clojure.core/macroexpand">macroexpand</a>:</p>

<p><div><script src='https://gist.github.com/a59b0bf59985df776119.js'></script>
<noscript><pre><code>(def idade 29)
(macroexpand &#39;(when (&gt; idade 18)
  (println &quot;pode beber champs&quot;)
  (println &quot;só na dirige&quot;)))
 
; =&gt; (if (&gt; idade 18)(do (println &quot;pode beber champs&quot;) (println &quot;só na dirige&quot;)))</code></pre></noscript></div>
</p>

<p>Como eu falei, nada mais que uma lista com chamadas para <code>if</code> e <code>do</code>. Isso acontece porque precisamos que uma lista seja retornada. Para que o Clojure possa dar <code>evaluate</code> nela, como se fora uma chamada para uma função qualquer, por exemplo: <code>(+ 1 2) ; =&gt; 2</code>.</p>

<p>Dentro de uma <em>macro</em> podemos usar qualquer outro código Clojure, chamar funções, por exemplo. Mas por que o <code>if</code> e o <code>do</code> não são <em>evaluated</em>? Porque usamos <em>Simple Quoting</em> para informar a linguagem que aquele pedaço de código não deve ser <em>evaluated</em>.</p>

<p>Vamos criar uma <em>macro</em> chamada <code>unless</code> (ok, já sei, existe o <code>if-not</code>) que recebe uma condicional e executa o bloco passado, que pode ser mais de uma lista, caso a condição seja <code>false</code>:</p>

<p><div><script src='https://gist.github.com/18b0b15d832815c982f3.js'></script>
<noscript><pre><code>(defmacro unless
  [test &amp; branches]
  (list &#39;if (list &#39;not test) (cons &#39;do branches)))
 
(macroexpand &#39;(unless (&gt; 2 1) (println &quot;If invertido&quot;)))
; =&gt; (if (not (&gt; 2 1)) (do (println &quot;If invertido&quot;)))</code></pre></noscript></div>
</p>

<p>Tivemos que fazer o <em>quote</em> do <code>if</code> para dizer que ele é um símbolo <code>unevaluated</code> na lista retornada. Porém, o código não ficou tão logível quanto deveria ficar, dependendo do tamanha da <em>macro</em> o código pode se tornar muito verboso e quase inelegível.</p>

<p>Para estes casos, podemos utilizar <em>Syntax Quoting</em>, um tipo de <em>quote</em> mais poderoso:</p>

<p><div><script src='https://gist.github.com/64b1e2f16a264a8bf03b.js'></script>
<noscript><pre><code>(defmacro unless
  [test &amp; branches]
  `(if (not test) (do branches)))
 
(macroexpand &#39;(unless (&gt; 2 1) (println &quot;If invertido&quot;)))
; =&gt; (if (clojure.core/not clojure.core/test) (do user/branches))</code></pre></noscript></div>
</p>

<p><em>Syntax Quoting</em> permite que uma lista <em>unevaluated</em> seja retornada, dando o mesmo efeito do <em>Simple Quoting</em>, mas com um código bem mais sucinto.</p>

<p>Uma das diferenças é que os símbolos são retornados com seu nome completo, por exemplo:</p>

<p><div><script src='https://gist.github.com/fd2f428264e5f9b76c35.js'></script>
<noscript><pre><code>&#39;+ ; =&gt; +
`+ ; =&gt; clojure.core/+</code></pre></noscript></div>
</p>

<p>Olhando o retorno da macro <code>unless</code> percebemos algo errado. Os parâmetros <code>test</code> e <code>branches</code> foram <em>quoted</em> também, quando na verdade deveriam ser <code>(&gt; 2 1)</code> e <code>(println "If invertido")</code>. Se tentarmos invocar a <em>macro</em> acima, uma exceção informando que os símbolos não existem.</p>

<p>Podemos informar ao Clojure que faça <em>unquote</em> utilizando <em>til</em> (~):</p>

<p><div><script src='https://gist.github.com/afddd9cca1f57dc6b41f.js'></script>
<noscript><pre><code>(defmacro unless
  [test &amp; branches]
  `(if (not ~test) (do ~branches)))
 
(macroexpand &#39;(unless (&gt; 2 1) (println &quot;If invertido&quot;)))
; =&gt; (if (clojure.core/not (&gt; 2 1)) (do ((println &quot;If invertido&quot;))))</code></pre></noscript></div>
</p>

<p>Quando um <em>til</em> aparece dentro de um código <em>syntax quoted</em>, o Clojure faz um <em>evaluate</em> destes <em>forms</em>. No próximo post falremos sobre <em>Unquote Splicing</em>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pattern Matching, Clojure E Elixir]]></title>
    <link href="http://lucasas.github.io/blog/2014/12/10/pattern-matching-clojure-erlang/"/>
    <updated>2014-12-10T23:38:41-02:00</updated>
    <id>http://lucasas.github.io/blog/2014/12/10/pattern-matching-clojure-erlang</id>
    <content type="html"><![CDATA[<p>No último sábado, tivemos uma aprensentação do <a href="https://twitter.com/arthurgeek">@arthurgeek</a> e do <a href="https://twitter.com/almeidaricardo">@ricardo</a> sobre Elixir aqui no <a href="http://www.getninjas.com.br">GetNinjas</a>. Dentre as várias coisas interessantes da linguagem, eles mostraram <em>pattern matching</em> em funções. <!--more--></p>

<p>Clojure, assim como a maioria das linguagens funcionais, implementa <em>pattern matching</em>. Mas primeiro vamos ver um código que não utiliza <em>pattern matching</em>, o conhecido e famigerado <em>FizzBuzz</em>:</p>

<p><div><script src='https://gist.github.com/1c5aacfbef839ef6fae7.js'></script>
<noscript><pre><code>(def numeros (range 1 101))
 
(doseq [n numeros]
  (println
    (let [ mod_3 (mod n 3) mod_5 (mod n 5) ]
      (cond 
        (and (= mod_3 0) (= mod_5 0)) &quot;FizzBuzz&quot;
        (and (= mod_3 0) (&gt; mod_5 0)) &quot;Fizz&quot;
        (and (&gt; mod_3 0) (= mod_5 0)) &quot;Buzz&quot;
        :else n))))</code></pre></noscript></div>
</p>

<p>Primeiro criamos uma coleção chamada <code>numeros</code> com um range de 1 a 100. A função <code>doseq</code> itera a coleção de números, o restante do código é a implementação básica do <em>FizzBuzz</em>:</p>

<ol>
<li>Calculamos o resto da divisão com 3 e 5, bindamos o resultado nos símbolos <code>mod_3</code> e <code>mod_5</code>, respectivamente.</li>
<li>A função <code>cond</code> é similar ao <code>switch</code> de outras linguagens, aceitando múltiplas condições. O suficiente para implementarmos as quatro condições do <em>FizzBuzz</em>.</li>
</ol>


<p>Vamos substituir as múltiplas condições da função <code>cond</code>, por um <em>pattern matching</em>, cuja uma das <em>features</em> é fazer asserção no conteúdo de uma variável:</p>

<p><div><script src='https://gist.github.com/ba623bf9ece9ae83388f.js'></script>
<noscript><pre><code>(use &#39;[clojure.core.match :only (match)])

(def numeros (range 1 101))

(doseq [n numeros]
  (println
    (match [(mod n 3) (mod n 5)]
      [0 0] &quot;FizzBuzz&quot;
      [0 _] &quot;Fizz&quot;
      [_ 0] &quot;Buzz&quot;
      :else n)))
</code></pre></noscript></div>
</p>

<p>Na primeira linha o objetivo é usar a função <code>use</code> para tornar disponível a função <code>match</code> pertencente ao módulo <code>clojure.core.match</code>, algo como importar a função para dentro do escopo onde iteramos a coleção.</p>

<p>A função <code>match</code> define dentro dos <code>[]</code> os valores que podemos fazer asserção. A primeira asserção feita verifica se os dois valores são <code>0</code>, caso positivo <code>FizzBuzz</code> é retornado para a função <code>println</code>, caso contrário, a próxima asserção é feita, neste caso, se o primeiro valor <code>(mod n 3)</code> for <code>0</code>, o valor <code>Fizz</code> é retornado. Se essa asserção falhar, a terceira é feita verificando que <code>(mod n 5)</code> é <code>0</code>, retornando <code>Buzz</code>. Caso nenhuma asserção for verdadeira, a opção <code>else</code> é executada e o valor <code>n</code> é retornado.</p>

<p>Na segunda asserção utilizamos <code>_</code> para que o Clojure ignore o segundo valor, ou seja, não importa o que <code>(mod n 5)</code> retorne, se o primeiro valor <code>(mod n 3)</code> for <code>0</code>, &ldquo;Fizz&rdquo; será retornado. O mesmo vale para a terceira asserção, obviamente, muda-se apenas o valor ao qual fazemos a verificação.</p>

<p><em>Pattern Matching</em> possui várias características legais que vou comentar ao longo dos outros posts. Mas uma <em>feature</em> do Elixir em particular que eu gostei muito, não existe (eu pelo menos não achei :P) no Clojure, que a capacidade fazer <em>match</em> na declaração de funções. Por exemplo o seguinte código em Elixir:</p>

<p><div><script src='https://gist.github.com/59a7db92fef8c6051d44.js'></script>
<noscript><pre><code>defmodule Factorial do
  def of(0), do: 1
  def of(1), do: 1
  def of(n) do
    n * of(n-1)
  end
end

Factorial.of(4) # 24
</code></pre></noscript></div>
</p>

<p>O <em>pattern matching</em> do Elixir consegue executar determinada função baseado no valor passado como argumento, ou seja, caso <code>Factorial.of(2)</code> seja invocada, o compilador sabe que a função <code>n * of(n - 1)</code> deve ser executada, quando <code>Factorial.of(0)</code> for chamado, o compilador executa a função que retorna <code>1</code> e quando <code>Factorial.of(1)</code> for chamado, a outra função que retorna <code>1</code> será executada. A legibilidade do código aumenta, conseguimos ler: <em>fatorial de 0 = 1</em> e <em>fatorial de n = n * fatorial(n - 1)</em>.</p>

<p>Como sabemos chamadas recursivas precisam de uma condição de parada. Normalmente no cálculo de fatorial a condição é <code>(= n 0) ; =&gt; true</code>, porém, aprendemos com o exemplo anterior que é possível remover <code>if</code> usando <em>pattern matching</em>. Uma versão do cálculo fatorial usando <code>match</code> ficaria assim:</p>

<p><div><script src='https://gist.github.com/9f1007e93186c8011840.js'></script>
<noscript><pre><code>(use &#39;[clojure.core.match :only (match)])

(defn fatorial [n]
  (match [n]
    [0] 1
    [1] 1
    [n] (* n (fatorial (dec n)))))

(fatorial 5) ; =&gt; 120
</code></pre></noscript></div>
</p>

<p>Mesmo assim, o código, na minha opinião, não fica tão legível quanto fica no exemplo escrito em Elixir.</p>

<p>A boa notícia é que conseguimos alcançar o mesmo comportamento em Clojure usando <em>macros</em>.</p>

<p>Como todos os dialetos Lisp, Clojure é uma linguagem <a href="https://en.wikipedia.org/wiki/Homoiconic"><em>homoiconic</em></a> que nos dá o poder de criar rotinas em Clojure que escrevem código Clojure.</p>

<p><em>Macros</em> são como funções, elas possuem nome, um documentação opcional, uma lista de argumentos e um corpo. O corpo, quase sempre retornará uma lista, o que faz bastante sentido, já que Clojure usa listas para representar chamada de funções, chamada de macros, e chamada para <em>forms</em> especiais. Tenha cuidado antes de criar uma <em>macro</em> porque é considerada uma má prática criá-las quando podemos resolver os problemas utilizando funções comuns.</p>

<p>Vamos criar uma <em>macro</em> simples:</p>

<p><div><script src='https://gist.github.com/ce316bddf5ce2324d968.js'></script>
<noscript><pre><code>(defmacro chamada-funcao-hipster
  &quot;Jeito hipster de chamar uma função ;-)&quot;
  [expression]
    (cons (second expression) (vector (first expression) (last expression))))
 
(chamada-funcao-hipster (1 + 1))</code></pre></noscript></div>
</p>

<p>Repare que dentro de uma <em>macro</em> podemos usar qualquer outro código Clojure. Você usa o poder da linguagem para fazer a própria linguagem. A diferença principal entre funções e macros é que argumentos de funções são <em>evaluated</em> antes de serem passadas para a função, <em>macros</em> recebem argumentos como estruturas de dados não <em>evaluated</em>. Você pode comprovar isso tentando rodar <code>(1 + 1)</code>, observando que uma exception ocorre.</p>

<p>Porém, quando passamos o mesmo código como argumento para a <em>macro</em> <code>chamada-funcao-hipster</code>, a lista não <em>evaluated</em> <code>(1 + 1)</code> é passada. Dentro do corpo da <em>macro</em>, manipulamos a lista para se tornar algo que o Clojure consiga <em>evaluate</em>: <code>(+ 1 1)</code>.</p>

<p>No exemplo do fatorial, onde queremos usar <em>pattern matching</em> na definição das funções, podemos utilizar a macro <a href="https://github.com/killme2008/defun">defun</a>, que por baixo dos panos cria uma função que utiliza o mesmo <code>match</code> que aprendemos a utilizar. Como havia dito, o código fica um pouco mais legível:</p>

<p><div><script src='https://gist.github.com/1127210fb9b53325821e.js'></script>
<noscript><pre><code>(use &#39;[defun :only [defun]])

(defun fatorial
  ([0] 1)
  ([1] 1)
  ([n] (* n (fatorial (dec n)))))
</code></pre></noscript></div>
</p>

<p><em>Macros</em> permitem que o compilador seja extendido por códigos escritos pelo usuário. Isso nos permite criar códigos que são mais concisos, legíveis e significativos. <a href="http://clojure.org/macros">Leia mais</a> sobre esse poderoso recurso da linguagem.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure E Recursão]]></title>
    <link href="http://lucasas.github.io/blog/2014/12/08/clojure-e-recursao/"/>
    <updated>2014-12-08T17:16:46-02:00</updated>
    <id>http://lucasas.github.io/blog/2014/12/08/clojure-e-recursao</id>
    <content type="html"><![CDATA[<p>Vamos ver um pouco sobre recursão e como resolver problemas de <em>tail recursion</em> utilizando Clojure. <!--more--></p>

<p><figure>
  <img src="/images/posts/recursion.jpg"/>
</figure></p>

<p>Você provavelmente já deve ter se deperado com algum código Javascript como o abaixo:</p>

<p><div><script src='https://gist.github.com/3d7dc27b16e927f24e87.js'></script>
<noscript><pre><code>var numbers = [1, 5, 6, 8, 10, 3, 45];
var total = 0;

for(var i=0; i &lt; numbers.length; i++) {
  total += numbers[i];
}
</code></pre></noscript></div>
</p>

<p>Tanto a variável <code>i</code> quanto a variável <code>total</code> são mutáveis, o que sabemos ser perigoso quando utilizamos paralelismo. Clojure não permite valores mutáveis, portanto, este tipo de problema não nos afeta. Em Clojure resolvemos estes problemas utilizando recursão, o jeito funcional de iterar uma coleção e construir um resultado.</p>

<p>Vamos criar uma função chamada <code>soma</code>, que obviamente, soma todos os valores de uma coleção. O código a seguir usa recursão para resolver o problema:</p>

<p><div><script src='https://gist.github.com/568799f5dbca3aa2674b.js'></script>
<noscript><pre><code>(defn soma
  ([valores acumulador]
     (if (empty? valores)
       acumulador
       (soma (rest valores) (+ (first valores) acumulador)))))

(soma [1 2 5] 0) ; =&gt; 8</code></pre></noscript></div>
</p>

<p>A função recebe dois argumentos, a coleção que será iterada e um acumulador da soma de cada elemento. Como toda função recursiva, precisamos de uma condição de parada, no exemplo essa condição verifica se a coleção <code>valores</code> é vazia <code>(if (empty? valores))</code>. Se a condição for verdadeira, sabemos que todos os elementos da coleção foram somados, por isso, retornamos o valor <code>acumulador</code>.</p>

<p>Mas se a condição não for verdadeira, isso significa que precisamos processar o restante da coleção <code>(rest valores)</code>, então recursivamente chamamos a mesma funcao <code>soma</code> apenas com <code>(rest valores)</code>, o <code>acumulador</code> passado é a soma do primeiro <code>(+ (first valores) acumulador</code> elemento da coleção. Executamos a função recursivamente até que <code>(if (empty? valores))</code> seja <code>true</code>.</p>

<p>Cada chamada da função <code>soma</code> criará um novo escopo, onde <code>valores</code> e <code>acumulador</code> são bindados em outros valores, tudo sem mutações.</p>

<p>O único ponto é que a função <code>soma</code> chamada com poucos elementos não apresenta problemas de performance:</p>

<p><div><script src='https://gist.github.com/1dc2071de0b74f0f7c57.js'></script>
<noscript><pre><code>(time (soma [1 2 5] 0)) ; =&gt; &quot;Elapsed time: 0.047669 msecs&quot;

; chamada com um número grande de elementos:

(soma (range 10000) 0) ; =&gt; StackOverflowError   clojure.lang.ChunkedCons.more
</code></pre></noscript></div>
</p>

<p>O código acima causa <code>10001</code> chamadas a função <code>soma</code>. No momento da última chamada, a primeira chamada está esperando pela segunda, a segunda está esperando pela terceira, a terceira está esperando pela quarta, e assim sucessivamente. Por fim, a milionésima primeira chamada está esperando pela milionésima. Cada uma destas chamadas estarão consumindo memória.</p>

<p>Mas o que a milionésima primeira chamada fará com o resultado da milionésima? Absolutamente nada. A chamada recursiva é a última coisa feita, por isso o resultado é apenas passado de volta para o <em>caller</em>, que passa o resultado para outro <em>caller</em> até que chegue no <em>caller</em> original. Esse <em>pattern</em> é conhecido como <em>tail-recursion</em>.</p>

<p>Alguns compiladores são espertos o suficiente para perceber que existe uma <em>tail recursion</em> e reescrevem a função utilizando um <code>loop</code> internamente. Mas, por limitações da JVM, Clojure não faz isso automaticamente. É necessário dizer ao compilador que você tem uma <em>tail recursion</em>. Em Clojure basta usar a função <code>recur</code>:</p>

<p><div><script src='https://gist.github.com/03de2a74ca03eac5d23a.js'></script>
<noscript><pre><code>(defn soma
  ([valores acumulador]
     (if (empty? valores)
       acumulador
       (recur (rest valores) (+ (first valores) acumulador)))))
        ; substituímos a função `soma` por `recur`</code></pre></noscript></div>
</p>

<p>Com apenas uma mudança ganhamos uma grande melhoria de performance:</p>

<p><div><script src='https://gist.github.com/221ca159ac50522b7530.js'></script>
<noscript><pre><code>(defn soma
  ([valores acumulador]
     (if (empty? valores)
       acumulador
       (soma (rest valores) (+ (first valores) acumulador)))))

(time (soma (range 1000) 0)) ; =&gt; &quot;Elapsed time: 1.936705 msecs&quot;

(defn soma
  ([valores acumulador]
     (if (empty? valores)
       acumulador
       (recur (rest valores) (+ (first valores) acumulador)))))
        ; substituímos a função `soma` por `recur`
        
(time (soma (range 1000) 0)) ; =&gt; &quot;Elapsed time: 0.755106 msecs&quot;
        
</code></pre></noscript></div>
</p>

<p>O tempo foi quase 3 vezes maior que a função que utiliza <code>recur</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure Em 15 Minutos]]></title>
    <link href="http://lucasas.github.io/blog/2014/12/05/clojure-em-15-minutos/"/>
    <updated>2014-12-05T16:04:28-02:00</updated>
    <id>http://lucasas.github.io/blog/2014/12/05/clojure-em-15-minutos</id>
    <content type="html"><![CDATA[<p>Decidi que começaria a estudar alguma linguagem funcional este ano. O &ldquo;problema&rdquo; era escolher
uma linguagem que tivesse mercado (afinal, já que quero aprender algo novo, vou unir o útil ao agradável e
aprender algo que me traga retorno), que tivesse uma comunidade ativa e que não tivesse uma syntax extramamente
bizarra. <!--more--></p>

<p><figure>
  <img src="/images/posts/clojure-logo.png"/>
</figure></p>

<p>Analisando todos estes fatores, decidi que Clojure seria a linguagem mais apropriada para o meu momento. Clojure
é bastante adotada em empresas fora do Brasil e algumas empresas por aqui estão utilizando também. A <a href="http://www.meetup.com/clj-sp">comunidade no Brasil</a> está crescendo e existem <a href="https://twitter.com/p_balduino">ótimos desenvolvedores</a> apostando nela.</p>

<p>Não vou entrar em detalhes sobre instalação e características da linguagem. Você pode ler mais sobre isso na <a href="http://clojure.org">documentação oficial da linguagem</a>, que alias, é excelente.</p>

<p>Clojure é um <a href="http://pt.wikipedia.org/wiki/Lisp">dialeto Lisp</a>, o que na minha opinião torna a linguagem muito simples de aprender, porém, muitos desenvolvedores acham que pode ser um processo lento seu aprendizado.</p>

<p>Nesse primeiro post, <a href="http://adambard.com/blog/clojure-in-15-minutes/">baseado no post &ldquo;Clojure in 15 minutes&rdquo; de Adam Bard</a>, de uma série de vários outros que pretendo escrever, vou abordar o básico da linguagem.</p>

<p><div><script src='https://gist.github.com/ab918490951b9d9b4db8.js'></script>
<noscript><pre><code>; Comentários podem ser escritos com ponto e vírgula

; Clojure é escrito usando &quot;forms&quot;, que são listas 
; de argmentos dentro de () separados por espaço em branco.
;
; O primeiro argumento sempre é uma função ou macro e 
; o restante são argumentos que serão passados para esta função
;
; Por exemplo:
(+ 1 2) ; =&gt; 3
; 
; + é função, os valores 1 e 2 são passados para função 
;
; Mais alguns exemplos:
(+ 1 1) ; =&gt; 2
(- 2 1) ; =&gt; 1
(* 1 2) ; =&gt; 2
(/ 2 1) ; =&gt; 2

; str criará uma nova string contendo todos argumentos passados
(str &quot;Hello&quot; &quot; &quot; &quot;World&quot;) ; =&gt; &quot;Hello World&quot;

; Testes de igualdade são sempre feitos com `=`:
(= 1 1) ; =&gt; true
(= 2 1) ; =&gt; false

; Quando você deseja inverter o valor booleano use `not`:
(not true) ; =&gt; false

; Listas podem ser encadeadas. Clojure as executará de dentro para fora: 
(+ 1 (- 3 2)) ; = 1 + (3 - 2) =&gt; 2

; Tipos
;;;;;;;;;;;;;

; Clojure utiliza alguns tipos definidos no Java. Exemplo: booleanos, strings e números.
; Use `class` para verificar o tipo de um determinado valor
(class 1) ; Inteiros literais são java.lang.Long por padrão
(class 1.); Float literais são java.lang.Double
(class &quot;&quot;); Strings sempre são envoltas de aspas duplas, e são java.lang.String
(class false) ; Booleanos são java.lang.Boolean
(class nil); O valor &quot;null&quot; é nil

; Collections e Sequences
;;;;;;;;;;;;;;;;;;;

; Vetores
(class [1 2 3]) ; =&gt; clojure.lang.PersistentVector

; Listas
; Para não serem interpretadas como listas que devem ser lidas
; como as anteriores, adicionamos `&#39;`
(class &#39;(1 2 3)) ; =&gt; clojure.lang.PersistentList

; Usar a função `list` também é uma opção
(class (list 1 2 3)) ; =&gt; clojure.lang.PersistentList

; Ambas estruturas são collections
(coll? &#39;(1 2 3)) ; =&gt; true
(coll? [1 2 3]) ; =&gt; true

; Porém, apenas listas são sequencias
(seq? &#39;(1 2 3)) ; =&gt; true
(seq? [1 2 3]) ; =&gt; false

; Use `cons` para adicionar um item no começo de uma lista ou vetor
(cons 4 [1 2 3]) ; =&gt; (4 1 2 3)
(cons 4 &#39;(1 2 3)) ; =&gt; (4 1 2 3)

; Use `conj` para adicionar um item no começo de uma lista
; ou no fim de um vetor
(conj [1 2 3] 4) ; =&gt; [1 2 3 4]
(conj &#39;(1 2 3) 4) ; =&gt; (4 1 2 3)

; Use `concat` para juntar duas collections
(concat [1 2] &#39;(3 4)) ; =&gt; (1 2 3 4)

; Use `map` para percorrer uma collection retornando outra
; com o resultado da operação feita. Por exemplo: A função `inc`
; utilizada com `map`, incrementará cada item da collection retornando
; uma nova
(map inc [1 2 3]) ; =&gt; (2 3 4)

; Use `filter` para percorrer e filtrar uma collection. Por exemplo:
(filter even? [1 2 3]) ; =&gt; (2)

; Use `reduce` para executar e agrupar os resultados
(reduce + [1 2 3 4])
; = (+ (+ (+ 1 2) 3) 4)
; =&gt; 10

; `reduce` pode receber uma argumento com valor inicial
(reduce + 1 [3 2 1])
; = (+ (+ (+ 1 3) 2) 1)
; =&gt; 7

; Para criar uma lista literal de dados, use &#39;
&#39;(+ 1 2) ; =&gt; (+ 1 2)

; Para executá-la use `eval`
(eval &#39;(+ 1 2)) ; =&gt; 3


; Funções
;;;;;;;;;;;;;;;;;;;;;

; Use `fn` para criar funções anônimas. 
; Uma função sempre retorna seu último statement.
(fn [] &quot;Olá&quot;) ; =&gt; fn

; Para invocá-la basta declará-la dentro de `()`
((fn [] &quot;Olá&quot;)) ; =&gt; &quot;Olá&quot;

; Para guardar uma função em uma variável basta usar `def`
(def ola (fn [] &quot;Olá&quot;))
(ola) ; =&gt; &quot;Olá&quot;

; O processo pode ser encurtado usando `defn`
(defn ola [] &quot;Olá&quot;)
(ola) ; =&gt; &quot;Olá&quot;

; `[]` representa o conjunto de parâmetros recebidos pela função
(defn ola [nome]
  (str &quot;Olá &quot; nome))
(ola &quot;Lucas&quot;) ; =&gt; &quot;Olá Lucas&quot;

; É possível criar funções com múltiplas assinaturas
(defn ola
  ([] &quot;Olá desconhecido&quot;)
  ([nome] (str &quot;Olá &quot; nome)))
(ola &quot;Lucas&quot;) ; =&gt; &quot;Olá Lucas&quot;
(ola) ; =&gt; &quot;Olá desconhecido&quot;

; Funções podem receber argumentos extras e disponibilizá-los
; em uma seq
(defn funcao-com-muitos-argumentos [&amp; args]
  (str &quot;Você passou &quot; (count args) &quot; argumentos: &quot; args))
(funcao-com-muitos-argumentos 1 2 3) ; =&gt; &quot;Você passou 3 argumentos: (1 2 3)&quot;

; É possível receber argumentos pré-definidos e extras
(defn funcao-com-muitos-argumentos [nome &amp; args]
  (str &quot;Oláá &quot; nome &quot;, você passou &quot; (count args) &quot; argumentos extra&quot;))
(funcao-com-muitos-argumentos &quot;Lucas&quot; 1 2 3)
; =&gt; &quot;Olá Lucas, você passou 3 argumentos extra&quot;


; Hashmaps
;;;;;;;;;;

(class {:a 1 :b 2 :c 3}) ; =&gt; clojure.lang.PersistentArrayMap

; Keywords são como string
(class :a) ; =&gt; clojure.lang.Keyword

; Maps podem user qualquer tipo como chame, mas o mais comum é que sejam keywords
(def stringmap (hash-map &quot;a&quot; 1, &quot;b&quot; 2, &quot;c&quot; 3))
stringmap  ; =&gt; {&quot;a&quot; 1, &quot;b&quot; 2, &quot;c&quot; 3}

(def keymap (hash-map :a 1 :b 2 :c 3))
(keymap) ; =&gt; {:a 1, :c 3, :b 2} (Como todo HashMap, a ordem não é garantida)

; A propósito, vírgulas são ignoradas e tratadas como espaços em branco
; por isso, você pode definir um map separados os conjuntos de chave e valores
; apenas por espaço.

; Keywords podem ser utilizadas diretamente para pegar o valor de uma HashMap 
(:b keymap) ; =&gt; 2

; Não tente com String, isso não é Rails ;-)
;(&quot;a&quot; stringmap)
; =&gt; Exception: java.lang.String cannot be cast to clojure.lang.IFn

; Keywords que não existem no HashMap retornam sempre nil
(:d keymap) ; =&gt; nil

; Use `assoc` para adicionar novas chaves
(assoc keymap :d 4) ; =&gt; {:a 1, :b 2, :c 3, :d 4}

; Mas lembre-se que Clojure trata tudo como imutável. Sendo assim:
keymap ; =&gt; {:a 1, :b 2, :c 3}

; Use `dissoc` para remover chaves
(dissoc keymap :a :b) ; =&gt; {:c 3}

; Sets
;;;;;;

(class #{1 2 3}) ; =&gt; clojure.lang.PersistentHashSet
(set [1 2 3 1 2 3 3 2 1 3 2 1]) ; =&gt; #{1 2 3}

; Adicione um item usando `conj`
(conj #{1 2 3} 4) ; =&gt; #{1 2 3 4}

; Remova um item usando `disj`
(disj #{1 2 3} 1) ; =&gt; #{2 3}

; Teste se um item existe em um set utilizando-o como uma função
(#{1 2 3} 1) ; =&gt; 1
(#{1 2 3} 4) ; =&gt; nil

; Outros forms
;;;;;;;;;;;;;;;;;

; Estruturas lógicas são macros no Clojure, e sua syntax
; é igualmente simples a todo resto.
(if false &quot;a&quot; &quot;b&quot;) ; =&gt; &quot;b&quot;
(if false &quot;a&quot;) ; =&gt; nil

; Use `let` para criar escopos temporários
; Neste exemplo, as variáveis `a` e `b` valem, respectivamente, `1` e `2`
(let [a 1 b 2]
  (+ a b)) ; =&gt; 3

E não podem ser utilizadas fora do `let`
(let [a 1 b 2]
  (+ a b)) ; =&gt; 3

(+ a b) ; =&gt; Unable to resolve symbol: a in this context 

; Grupos de statements podem ser feitos utilizando `do`:
(do
  (print &quot;Olá&quot;)
  &quot;Mundo&quot;) ; =&gt; &quot;Olá&quot; (prints &quot;Mundo&quot;)

; Funções tem um `do` implícito
(defn imprime-e-diz-ola [nome]
  (print &quot;Falando olá para &quot; name)
  (str &quot;Olá &quot; name))
(imprime-e-diz-ola &quot;Lucas&quot;) ;=&gt; &quot;Olá Lucas&quot; (prints &quot;Falando olá para Lucas&quot;)

; `let` também possui `do` implícito
(let [nome &quot;Lucas&quot;]
  (print &quot;Falando olá para &quot; name)
  (str &quot;Olá &quot; name)) ;=&gt; &quot;Olá Lucas&quot; (prints &quot;Falando olá para Lucas&quot;)
</code></pre></noscript></div>
</p>

<p>Isso é o básico para você conseguir brincar com Clojure.</p>
]]></content>
  </entry>
  
</feed>
